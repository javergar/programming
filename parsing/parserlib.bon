(* Parsing combinators library
@description Provides generic functions that allow parsing
@author Jose Vergara.
@since 22 Dec 2010.
@version 1.3

%open "parserlib.bon";;

*)

%open "containers.bon";;

datatype Reply a b = Ok of (b * ContainerList<a>) | Error ;;
datatype Consumed a b = WConsumed of (Reply a b) | Empty of (Reply a b);;

let (tokenizeString: String -> List char) p = 
let rp = Ref p in
let i = Ref (lengthstring p) in
let rlength = Ref (lengthstring p) in
let rlist = Ref (Cons '@' Nil) in
while (!i  > 0) do (
   i = !i-1;
   if (((!rp getcharstring (!i)) != '\013') && ((!rp getcharstring (!i)) != '\t') ) then
   (
   if (!i == !rlength-1)  then 
            (rlist = (Cons (!rp getcharstring (!i)) Nil) )
            else 
            (rlist = (Cons (!rp getcharstring (!i)) !rlist))
	) else ()
);
!rlist;;

let (sat: (a -> b) -> (a -> Bool) -> (ContainerList<a> -> Consumed a b)) p t =
| (xs:ContainerList<a,b>) -> 
     match (xs.next()) with
     | Some x -> if (t x) then WConsumed (Ok (p x,xs)) else Empty Error
     | None -> Empty Error
;;

let ((<|>): (ContainerList<a> -> Consumed a b)-> 
            (ContainerList<a> -> Consumed a b) -> (ContainerList<a> -> Consumed a b)) p q s = 
let data = s.get_data() in
match p s  with
  | WConsumed (Ok (x,y)) -> WConsumed (Ok (x,y))
  | Empty (Ok (x,y)) -> q y
  | Empty (Error) -> s.set_data data;q s
;;


let ((>>=): (ContainerList<a> -> Consumed a b )  -> 
            (b -> (ContainerList<a> -> Consumed a c)) -> 
            (ContainerList<a> -> Consumed a c)) p q s =
match p s with
  |Empty (Error) -> Empty (Error)
  |WConsumed (Ok (x,y)) -> (q x) y
  |Empty (Ok (x,y)) -> (q x) y
;;

let ((>>): (ContainerList<a> -> Consumed a b) -> 
           (ContainerList<a> -> Consumed a c) -> 
           (ContainerList<a> -> Consumed a c)) p q s =
match p s with
  |Empty (Error) -> Empty (Error)
  |WConsumed (Ok (x,y)) -> q y
  |Empty (Ok (x,y)) -> q y
;;


let (return: b -> (ContainerList<a> -> Consumed a b) ) val s =
WConsumed (Ok(val,s));;

let (return1: b -> (ContainerList<a> -> Consumed a b) ) val s =
Empty (Ok(val,s));;

let rec many p  =
( p  >>= (fun x -> ((many p) <|> return []) >>= 
(fun xs -> return (append (Cons x Nil)  xs)))) <|> return [];;


let rec manySuccess p eof =
p  >>= (fun x -> ((manySuccess p eof) <|> (eof >> return [])) >>= 
 (fun xs -> return (append (Cons x Nil)  xs)))
;;

let oneOrMany p = p >>= (fun x ->  (many p) >>= (fun y -> return (Cons x y)));;

let maybe p = (p <|> return []);;


let ext (sp: a -> a -> Bool) c1 c2 = 
c1 == c2
;;

let (except: a -> a -> Bool) c1 c2 = 
c1 != c2
;;


(*
let (any: a -> Bool) x = True;; 
*)

(* Generators *)

let (getParserList: (a -> b) -> (List a) ->  List (ContainerList<a> -> Consumed a  b) ) trans input =  
map (fun x -> sat trans (sp x)) input
;;

let rec (getSeqValParser:     (List (ContainerList<a> -> Consumed a b)) ->
                              (ContainerList<a> -> Consumed a (List b))    ) =
| Cons x Nil -> (x >>= (fun x -> return (Cons x Nil)))
| Cons x y -> (x >>= (fun p -> (getSeqValParser y) >>= 
(fun q -> (return (append (Cons p Nil) q)))))
;;

let rec (getSeqParser: (List (ContainerList<a> -> Consumed a b)) 
                           -> (ContainerList<a> -> Consumed a (List b))) =
| Cons x Nil -> x >> (return [])
| Cons x y -> x >> (getSeqParser y)
;;

let rec (getChoiceParser: List (ContainerList<a> -> Consumed a b) ->   
                               (ContainerList<a> -> Consumed a b)) =
| Cons x Nil -> x 
| Cons x y -> (x <|> (getChoiceParser y)) 
;;

let getResult =
  |WConsumed (Ok (x,y)) ->  x
  |Empty (Ok (x,y)) ->  x
;;

datatype Regexp a  = Lit of a
| Or of List (Regexp a) | And of List (Regexp a)
| Cont of List (Regexp a) | Star of Regexp a | Eps
;;

(* Char Parsers *)
let charParser x =
(1 makestring x)
;;

let valueParser text = getSeqValParser (getParserList charParser (tokenizeString text))
;;

let choiceParser text = getChoiceParser (getParserList charParser (tokenizeString text))
;;

let (escDQ: Char -> String) x =
if (x== '"') then "\"" else (1 makestring x)
;;

let inputStr s = make_list (tokenizeString (s^" \n"))
;;

let (islowercaseletter: Char -> Bool) c =
c >= 'a' && c <= 'z' 
;;

let (isuppercaseletter: Char -> Bool) c =
c >= 'A' && c <= 'Z' 
;;

let (isletter: Char -> Bool) c =islowercaseletter c || isuppercaseletter c
;;

let (isdigit: Char -> Bool) c =
(c >= '0' && c <= '9')
;;


let spchar x =
sat charParser (sp x)
;;

let lowercaseletter = sat charParser islowercaseletter
;;
let uppercaseletter = sat charParser isuppercaseletter
;;
let letter = sat charParser isletter
;;

let digit = sat  charParser isdigit
;;

let wspacechar = 
 (spchar ' ')  <|>  
 ((spchar '\t')  <|>  
 (spchar '\n')) 
;;



let wspace = many wspacechar
;;

let delim = oneOrMany (spchar ' ')
;;

let sign = (spchar '-') <|> (return "")
;;

let digits = (digit >>= (fun x-> (many (digit)) >>= 
                                 (fun y -> return (Cons x y)))) >>= 
                                           (fun x -> return (foldleft(^) "" x))
;;

let intParser = sign >>= (fun s -> (digits >>= 
                                     (fun d -> return (s^d)))) 
;;

let floatParser = (intParser >>= (fun x-> (spchar '.') 
		    >> (digits >>= (fun y -> (return (x^"."^y))))))
;;

let symbolParser = (choiceParser ".&#*/:;+=,_@?|!%()-$^{}<>")
;;

let lowercaseIdentParser = lowercaseletter >>= (fun x -> (many (letter <|> digit)) >>=
                                      (fun y -> return (x^(foldleft(^) "" y))))
;;

let uppercaseIdentParser = uppercaseletter >>= (fun x -> (many (letter <|> digit)) >>=
                                      (fun y -> return (x^(foldleft(^) "" y))))
;;



let manyelem =  (many (spchar ',') >> letter)
;; 

let list_chars = (spchar '[') >> 
(((spchar ']') >> (return ["[]"]))
 <|>  (letter >>= (fun x ->  (many ((spchar ',') >> letter)) >>=
                  (fun xs -> (spchar ']') >> return (Cons x xs)))))
;;
